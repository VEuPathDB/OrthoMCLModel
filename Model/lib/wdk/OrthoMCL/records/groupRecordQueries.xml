<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>

    <!-- 
    Group Attribute Queries                                     
    -->
    
    <querySet name="GroupAttributes" queryType="attribute" isCacheable="false">

       <defaultTestParamValues>
            <paramValue name="group_name">OG6_101427</paramValue>
       </defaultTestParamValues>

        <testRowCountSql>
            SELECT count(*)
	    FROM apidb.OrthologGroup
        </testRowCountSql>


        <sqlQuery name="GroupAttrs">
            <column name="group_name"/>
            <column name="group_type"/>
            <column name="number_of_members"/>
            <column name="number_of_core_members"/>
            <column name="number_of_peripheral_members"/>
            <sql>
            <![CDATA[
            SELECT
              group_id AS group_name,
              number_of_members,
              number_of_core_members,
              number_of_peripheral_members,
              decode(is_residual, 1, 'Residual', 'Core') AS group_type
            FROM
              apidb.ORTHOLOGGROUP
      ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="MaxSequenceLength">
          <column name="group_name"/>
          <column name="max_length"/>
          <sql>
            <![CDATA[
              select group_name, max(length) AS max_length
              from ApidbTuning.SequenceAttributes
              group by group_name
            ]]>
          </sql>
        </sqlQuery>



        <sqlQuery name="CoreMinEvalue">
          <column name="group_name"/>
          <column name="core_min_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C'
                    and stat_type = 'min')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_min_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="Core25Evalue">
          <column name="group_name"/>
          <column name="core_25_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C'
                    and stat_type = '25 PCT')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_25_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="CoreMedianEvalue">
          <column name="group_name"/>
          <column name="core_median_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C'
                    and stat_type = 'median')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_median_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="Core75Evalue">
          <column name="group_name"/>
          <column name="core_75_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C'
                    and stat_type = '75 PCT')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_75_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="CoreMaxEvalue">
          <column name="group_name"/>
          <column name="core_max_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C'
                    and stat_type = 'max')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_max_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>


        <sqlQuery name="CorePeripheralMinEvalue">
          <column name="group_name"/>
          <column name="core_peripheral_min_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C+P'
                    and stat_type = 'min')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_peripheral_min_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="CorePeripheral25Evalue">
          <column name="group_name"/>
          <column name="core_peripheral_25_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C+P'
                    and stat_type = '25 PCT')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_peripheral_25_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="CorePeripheralMedianEvalue">
          <column name="group_name"/>
          <column name="core_peripheral_median_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C+P'
                    and stat_type = 'median')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_peripheral_median_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="CorePeripheral75Evalue">
          <column name="group_name"/>
          <column name="core_peripheral_75_evalue"/>
          <sql>
                 WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C+P'
                    and stat_type = '75 PCT')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_peripheral_75_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="CorePeripheralMaxEvalue">
          <column name="group_name"/>
          <column name="core_peripheral_max_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'C+P'
                    and stat_type = 'max')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as core_peripheral_max_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>


        <sqlQuery name="ResidualMinEvalue">
          <column name="group_name"/>
          <column name="residual_min_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'R'
                    and stat_type = 'min')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as residual_min_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="Residual25Evalue">
          <column name="group_name"/>
          <column name="residual_25_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'R'
                    and stat_type = '25 PCT')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as residual_25_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="ResidualMedianEvalue">
          <column name="group_name"/>
          <column name="residual_median_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'R'
                    and stat_type = 'median')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as residual_median_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="Residual75Evalue">
          <column name="group_name"/>
          <column name="residual_75_evalue"/>
          <sql>
                 WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'R'
                    and stat_type = '75 PCT')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as residual_75_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>

        <sqlQuery name="ResidualMaxEvalue">
          <column name="group_name"/>
          <column name="residual_max_evalue"/>
          <sql>
                WITH selection AS (
                    select group_id, evalue
                    from apidb.orthologgroupstats
                    where protein_subset = 'R'
                    and stat_type = 'max')
                SELECT og.group_id as group_name,
                    CASE WHEN (og.group_id = s.group_id) THEN s.evalue
                        ELSE NULL END as residual_max_evalue
                FROM apidb.orthologgroup og, selection s
                WHERE og.group_id = s.group_id(+)
          </sql>
        </sqlQuery>


        <sqlQuery name="Layout">
            <column name="group_name"/>
            <column name="layout"/>
            <sql>
            <![CDATA[
                select g.name AS group_name, l.layout
                from apidb.OrthologGroup g, apidbTuning.GroupLayout l
                where g.name = l.group_name(+)
                        ]]>
            </sql>
        </sqlQuery>

	<sqlQuery name="EcNumbers">
	  <column name="group_name" />
	  <column name="ec_numbers" />
	  <sql>
      select og.group_id as group_name, ec.ec_numbers
      from (
      SELECT group_name,
      LISTAGG(EC_NUMBER || '(' || ec_count || ')', ', ') WITHIN GROUP (
      ORDER BY
        ec_count DESC) AS ec_numbers
    FROM
      (
      SELECT
        GROUP_NAME,
        COUNT(*) AS ec_count,
        EC_NUMBER
      FROM
        apidbtuning.sequenceenzymeclass
      GROUP BY
        group_name ,
        EC_NUMBER
            ) t
            group by group_name
            ) ec, apidb.orthologgroup og
       where og.group_id = ec.group_name (+)
	  </sql>
	</sqlQuery>

	<sqlQuery name="Keywords">
	  <column name="group_name" />
	  <column name="keywords" />
	  <sql>
            <![CDATA[
              select og.group_id as group_name, verbiage.keywords
              from apidb.OrthologGroup og,
                   (select ortholog_group_id,
                           listagg(keyword, '; ') within group (order by to_number(frequency) desc) as keywords
                    from apidb.OrthomclGroupKeyword
                    group by ortholog_group_id
                   ) verbiage
              where og.group_id = verbiage.ortholog_group_id(+)

            ]]>
	  </sql>
	</sqlQuery>

	<sqlQuery name="PreviousGroups">
	  <column name="group_name" />
	  <column name="previous_groups" />
	  <sql>
            <![CDATA[
SELECT new_group_id AS group_name,
       CASE 
           WHEN prev_groups IS NULL THEN 'none'
           ELSE prev_groups || 
                CASE 
                    WHEN cnt > 6 THEN '... &nbsp;&nbsp;<a href="#previousGroups">(See all ' || cnt || ' groups)</a>' 
                    ELSE ''
                END
       END AS previous_groups
FROM (
    SELECT new_group_id,
           COUNT(*) AS cnt,
           LISTAGG(CASE WHEN seqnum <= 6 THEN old_group_id END, ', ') 
               WITHIN GROUP (ORDER BY old_group_id) AS prev_groups
    FROM (
        SELECT old_group_id, new_group_id,
               ROW_NUMBER() OVER (PARTITION BY new_group_id ORDER BY old_group_id) AS seqnum
        FROM apidb.groupmapping
        AND new_group_id <> old_group_id
        UNION ALL
        SELECT NULL AS old_group_id, 'OGR7_0006056' AS new_group_id, NULL AS seqnum FROM dual
    )
    GROUP BY new_group_id
)
            ]]>
	  </sql>
	</sqlQuery>


	<sqlQuery name="Domains">
	  <column name="group_name" />
	  <column name="descriptions" />
	  <sql>
            <![CDATA[
		     SELECT group_name, descriptions
		     FROM apidbtuning.GroupDomainAttribute
            ]]>
	  </sql>
	</sqlQuery>

	<sqlQuery name="PhyleticPattern">
	  <column name="group_name" />
	  <column name="alveolata_actual" />
	  <column name="alveolata_total" />
	  <column name="alveolata_percent" />
	  <column name="archaea_actual" />
	  <column name="archaea_total" />
	  <column name="archaea_percent" />
	  <column name="amoeba_actual" />
	  <column name="amoeba_total" />
	  <column name="amoeba_percent" />
	  <column name="bacteria_actual" />
	  <column name="bacteria_total" />
	  <column name="bacteria_percent" />
	  <column name="fungi_actual" />
	  <column name="fungi_total" />
	  <column name="fungi_percent" />
	  <column name="euglenozoa_actual" />
	  <column name="euglenozoa_total" />
	  <column name="euglenozoa_percent" />
	  <column name="metazoa_actual" />
	  <column name="metazoa_total" />
	  <column name="metazoa_percent" />
	  <column name="viridiplantae_actual" />
	  <column name="viridiplantae_total" />
	  <column name="viridiplantae_percent" />
	  <column name="other_eukaryotes_actual" />
	  <column name="other_eukaryotes_total" />
	  <column name="other_eukaryotes_percent" />
	  <column name="bacteria_firm_actual" />
	  <column name="bacteria_firm_total" />
	  <column name="bacteria_proa_actual" />
	  <column name="bacteria_proa_total" />
	  <column name="bacteria_prob_actual" />
	  <column name="bacteria_prob_total" />
	  <column name="bacteria_prod_actual" />
	  <column name="bacteria_prod_total" />
	  <column name="bacteria_proe_actual" />
	  <column name="bacteria_proe_total" />
	  <column name="bacteria_prog_actual" />
	  <column name="bacteria_prog_total" />
	  <column name="bacteria_obac_actual" />
	  <column name="bacteria_obac_total" />
	  <column name="archaea_arch_actual" />
	  <column name="archaea_arch_total" />
	  <column name="archaea_eury_actual" />
	  <column name="archaea_eury_total" />
	  <column name="archaea_cren_actual" />
	  <column name="archaea_cren_total" />
	  <column name="archaea_nano_actual" />
	  <column name="archaea_nano_total" />
	  <column name="archaea_kora_actual" />
	  <column name="archaea_kora_total" />
	  <column name="oeuk_genera_html" />
	  <column name="eugl_genera_html" />
	  <column name="amoe_genera_html" />
	  <column name="alveolata_alve_actual" />
	  <column name="alveolata_alve_total" />
	  <column name="alveolata_cili_actual" />
	  <column name="alveolata_cili_total" />
	  <column name="alveolata_apic_actual" />
	  <column name="alveolata_apic_total" />
	  <column name="alveolata_cocc_actual" />
	  <column name="alveolata_cocc_total" />
	  <column name="alveolata_haem_actual" />
	  <column name="alveolata_haem_total" />
	  <column name="alveolata_piro_actual" />
	  <column name="alveolata_piro_total" />
	  <column name="viridiplantae_stre_actual" />
	  <column name="viridiplantae_stre_total" />
	  <column name="viridiplantae_chlo_actual" />
	  <column name="viridiplantae_chlo_total" />
	  <column name="viridiplantae_rhod_actual" />
	  <column name="viridiplantae_rhod_total" />
	  <column name="viridiplantae_cryp_actual" />
	  <column name="viridiplantae_cryp_total" />
	  <column name="fungi_fung_actual" />
	  <column name="fungi_fung_total" />
	  <column name="fungi_micr_actual" />
	  <column name="fungi_micr_total" />
	  <column name="fungi_basi_actual" />
	  <column name="fungi_basi_total" />
	  <column name="fungi_asco_actual" />
	  <column name="fungi_asco_total" />
	  <column name="fungi_muco_actual" />
	  <column name="fungi_muco_total" />
	  <column name="fungi_chyt_actual" />
	  <column name="fungi_chyt_total" />
	  <column name="metazoa_omet_actual" />
	  <column name="metazoa_omet_total" />
	  <column name="metazoa_nema_actual" />
	  <column name="metazoa_nema_total" />
	  <column name="metazoa_arth_actual" />
	  <column name="metazoa_arth_total" />
	  <column name="metazoa_chor_actual" />
	  <column name="metazoa_chor_total" />
	  <column name="metazoa_acti_actual" />
	  <column name="metazoa_acti_total" />
	  <column name="metazoa_aves_actual" />
	  <column name="metazoa_aves_total" />
	  <column name="metazoa_mamm_actual" />
	  <column name="metazoa_mamm_total" />
	  <column name="metazoa_tuni_actual" />
	  <column name="metazoa_tuni_total" />
	  <sql>
            <![CDATA[
SELECT group_name,
       alveolata_actual,alveolata_total,alveolata_percent,archaea_actual,archaea_total,archaea_percent,
       amoeba_actual,amoeba_total,amoeba_percent,bacteria_actual,bacteria_total,bacteria_percent,
       fungi_actual,fungi_total,fungi_percent,euglenozoa_actual,euglenozoa_total,euglenozoa_percent,
       metazoa_actual,metazoa_total,metazoa_percent,viridiplantae_actual,viridiplantae_total,viridiplantae_percent,
       other_eukaryotes_actual,other_eukaryotes_total,other_eukaryotes_percent,
       bacteria_firm_actual, bacteria_firm_total, bacteria_proa_actual, bacteria_proa_total,
       bacteria_prob_actual, bacteria_prob_total, bacteria_prod_actual, bacteria_prod_total,
       bacteria_proe_actual,bacteria_proe_total, bacteria_prog_actual, bacteria_prog_total,
       bacteria_obac_actual, bacteria_obac_total, archaea_arch_actual, archaea_arch_total,
       archaea_eury_actual, archaea_eury_total, archaea_cren_actual, archaea_cren_total,
       archaea_nano_actual, archaea_nano_total, archaea_kora_actual, archaea_kora_total,
       oeuk_genera_html, eugl_genera_html, amoe_genera_html,
       alveolata_alve_actual, alveolata_alve_total, alveolata_cili_actual,
       alveolata_cili_total, alveolata_apic_actual, alveolata_apic_total, alveolata_cocc_actual,
       alveolata_cocc_total, alveolata_haem_actual, alveolata_haem_total, alveolata_piro_actual,
       alveolata_piro_total, viridiplantae_stre_actual, viridiplantae_stre_total,
       viridiplantae_chlo_actual, viridiplantae_chlo_total, viridiplantae_rhod_actual,
       viridiplantae_rhod_total, viridiplantae_cryp_actual, viridiplantae_cryp_total,
       fungi_fung_actual, fungi_fung_total, fungi_micr_actual, fungi_micr_total,
       fungi_basi_actual, fungi_basi_total, fungi_asco_actual, fungi_asco_total,
       fungi_muco_actual, fungi_muco_total, fungi_chyt_actual, fungi_chyt_total,
       metazoa_omet_actual, metazoa_omet_total, metazoa_nema_actual, metazoa_nema_total,
       metazoa_arth_actual, metazoa_arth_total, metazoa_chor_actual, metazoa_chor_total,
       metazoa_acti_actual, metazoa_acti_total, metazoa_aves_actual, metazoa_aves_total,
       metazoa_mamm_actual, metazoa_mamm_total, metazoa_tuni_actual, metazoa_tuni_total
FROM apidbtuning.PhyleticPattern
            ]]>
	  </sql>
	</sqlQuery>

    </querySet>

    <!-- 
    Group Table Queries                                     
    -->

    <querySet name="GroupTables" queryType="table"  isCacheable="false">

      <defaultTestParamValues>
            <paramValue name="group_name">OG7_0008348</paramValue>
      </defaultTestParamValues>

      <sqlQuery name="previousGroups">
        <column name="group_name"/>
        <column name="group_id"/>
        <sql>
           <![CDATA[
            SELECT old_group_id AS group_id, new_group_id AS group_name
            FROM apidb.groupmapping
            WHERE new_group_id <> old_group_id
            ORDER BY old_group_id DESC 
          ]]>
        </sql>
      </sqlQuery>



      <sqlQuery name="TaxonCounts">
        <column name="group_name"/>
        <column name="taxon_id"/>
        <column name="abbrev"/>
        <column name="count"/>
        <sql>
          <![CDATA[
            select sa.group_name, ot.orthomcl_taxon_id as taxon_id,
                   ot.three_letter_abbrev as abbrev, count(*) as count
            from ApidbTuning.SequenceAttributes sa,
                 apidb.OrthomclTaxon ot
            where sa.orthomcl_taxon_id = ot.orthomcl_taxon_id
            group by sa.group_name, ot.orthomcl_taxon_id, ot.three_letter_abbrev
          ]]>
        </sql>
      </sqlQuery>

        <sqlQuery name="Statistics">
            <column name="group_name"/>
            <column name="group_type"/>
            <column name="number_of_members"/>
            <column name="avg_percent_identity"/>
            <column name="number_of_match_pairs"/>
            <column name="max_match_pairs"/>
            <column name="percent_match_pairs"/>
            <column name="avg_percent_match"/>
            <column name="evalue"/>
            <column name="evalue_display"/>
            <column name="avg_connectivity"/>
            <sql>
            <![CDATA[
		     SELECT name AS group_name, number_of_members, number_of_match_pairs,
		            DECODE(avg_percent_identity,null,'',round(avg_percent_identity,1)) AS avg_percent_identity,
			    DECODE(percent_match_pairs,null,'',round(percent_match_pairs,1)) AS percent_match_pairs,
			    number_of_members*(number_of_members-1)/2 AS max_match_pairs,
		            DECODE(avg_percent_match,null,'',round(avg_percent_match,1)) AS avg_percent_match,
			    DECODE(avg_connectivity,null,'',round(100*avg_connectivity/(number_of_members-1),1)) AS avg_connectivity,
			    CASE WHEN (number_of_members=1) THEN 1 WHEN (avg_evalue_mant IS NULL OR avg_evalue_exp IS NULL) THEN 0 ELSE ROUND(avg_evalue_mant,1) * power(10,avg_evalue_exp) END AS evalue,
			    CASE WHEN (number_of_members=1) THEN '' WHEN (avg_evalue_mant IS NULL OR avg_evalue_exp IS NULL) THEN '0' ELSE ROUND(avg_evalue_mant,1) || 'E' || avg_evalue_exp END AS evalue_display,
			    CASE core_peripheral_residual WHEN 'C' THEN 'Core only' WHEN 'P' THEN 'Core+Peripheral' WHEN 'R' THEN 'Peripheral only' ELSE '' END AS group_type
		     FROM apidb.OrthologGroup
			]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="Proteins">
            <column name="core_peripheral"/>
            <column name="group_name"/>
            <column name="full_id"/>
            <column name="organism_name"/>
            <column name="taxon_group"/>
            <column name="taxon_abbrev"/>
            <column name="length"/>
            <!--
            <column name="previous_groups"/>
            -->
            <column name="description"/>
            <column name="ec_numbers"/>
            <sql>
              <![CDATA[
              SELECT
                CASE
                  sa.core_peripheral WHEN 'C' THEN 'Core'
                  WHEN 'P' THEN 'Peripheral'
                  ELSE ''
                END AS core_peripheral,
                  sa.group_name,
                sa.full_id,
                sa.organism_name,
                sa.taxon_abbreviation AS taxon_abbrev,
                sa.taxon_group,
                sa.length,
                sa.product AS description,
                sec.ec_numbers
              FROM
                ApidbTuning.SequenceAttributes sa
              , (select full_id
                      , LISTAGG(EC_NUMBER, ', ') WITHIN GROUP (ORDER BY ec_number) AS ec_numbers 
                 from apidbtuning.sequenceenzymeclass group by full_id) sec
                where sa.full_id = sec.full_id (+)
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="PFams">
          <column name="group_name"/>
          <column name="accession"/>
          <column name="description"/>
          <column name="num_proteins"/>
          <column name="domain_index"/>
          <column name="max_index"/>
          <sql>
            <![CDATA[
     SELECT *
     FROM (
           SELECT group_name, accession, description, domain_index, COUNT(distinct full_id) as num_proteins,
                  (SELECT MAX(domain_index) FROM ApidbTuning.DomainAssignment) AS max_index
           FROM ApidbTuning.DomainAssignment
           GROUP BY group_name, accession, description, domain_index
          )
     ORDER BY num_proteins desc
            ]]>
          </sql>
        </sqlQuery>


        <sqlQuery name="ProteinPFams">
          <column name="group_name"/>
          <column name="accession"/>
          <column name="full_id"/>
          <column name="protein_length"/>
          <column name="taxon_name"/>
          <column name="core_peripheral"/>
          <column name="domain_index"/>
          <column name="start_min"/>
          <column name="end_max"/>
          <sql>
<!-- The ProteinPFams query did not work correctly on the website because of the SQL wrapped around it.
     The minimum of all lengths was shown for each protein. The original phrase that resulted in this
     error was sa.length, but the current phrase round(sa.length,0) fixed this in an unknown way.  -->
            <![CDATA[
     SELECT sa.group_name, sa.full_id, round(sa.length,0) as protein_length, sa.organism_name as taxon_name,
     case sa.core_peripheral when 'C' then 'Core' when 'P' then 'Peripheral' else '' end as core_peripheral,
     da.accession, da.domain_index, da.start_min, da.end_max
     from ApidbTuning.SequenceAttributes sa            
     Left outer join ApidbTuning.DomainAssignment da
     on da.full_id = sa.full_id
     ORDER BY sa.full_id, da.start_min
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="EcNumber">
          <column name="group_name"/>
          <column name="ec_number"/>
          <column name="description"/>
          <column name="sequence_count"/>
          <sql>
            <![CDATA[
              select sec.group_name
                   , sec.ec_number
                   , sec.description
                   , count(*) as sequence_count
              from apidbtuning.sequenceenzymeclass sec
              group by group_name, ec_number, description
              order by count(*) desc
            ]]>
          </sql>
        </sqlQuery>

	<sqlQuery name="SimilarGroup">
	  <column name="group_name" />
	  <column name="similar_group" />
	  <column name="protein_count" />
	  <column name="keyword" />
	  <column name="pfam" />
	  <column name="evalue" />

	  <sql>
          SELECT og.group_id AS group_name, sog.similar_group_id AS similar_group,  groupProteinCount.protein_count as protein_count, verbiage.keywords as keyword, domains.pfam, evalue
          FROM apidb.SimilarOrthologGroup sog, apidb.orthologgroup og, (SELECT ogas.group_id, count(ogas.aa_sequence_id) as protein_count 
                                                                        FROM apidb.orthologgroupaasequence ogas 
                                                                        GROUP BY ogas.group_id) groupProteinCount,
          (select ortholog_group_id, listagg(keyword, '; ') within group (order by to_number(frequency) desc) as keywords from apidb.OrthomclGroupKeyword group by ortholog_group_id) verbiage,
          (SELECT group_name, listagg(unique(accession), ', ') as pfam FROM ApidbTuning.DomainAssignment group by group_name) domains
          WHERE og.group_id = sog.group_id 
          AND sog.similar_group_id = groupProteinCount.group_id 
          AND sog.similar_group_id = verbiage.ortholog_group_id
          AND sog.similar_group_id = domains.group_name
          ORDER BY evalue ASC
      	  </sql>
	</sqlQuery>

	<sqlQuery name="GroupStat">
	  <column name="group_name" />
	  <column name="group_type" />
	  <column name="min" />
	  <column name="twentyfive" />
	  <column name="median" />
	  <column name="seventyfive" />
	  <column name="max" />
	  <sql>
          SELECT DISTINCT ogs.group_id as group_name, min.min as min, twentyfive.twentyfive as twentyfive, median.median as median, seventyfive.seventyfive as seventyfive, max.max as max,
          CASE ogs.protein_subset WHEN 'C' THEN 'Core only' WHEN 'C+P' THEN 'Core+Peripheral' WHEN 'R' THEN 'Peripheral only' ELSE '' END AS group_type
          FROM apidb.orthologgroupstats ogs
          INNER JOIN (SELECT ogsa.group_id, ogsa.protein_subset, ogsa.evalue AS min 
                      FROM apidb.orthologgroupstats ogsa 
                      WHERE ogsa.stat_type = 'min') min 
          ON ogs.group_id = min.group_id 
          AND ogs.protein_subset = min.protein_subset
          INNER JOIN (SELECT ogsb.group_id, ogsb.protein_subset, ogsb.evalue AS twentyfive 
                      FROM apidb.orthologgroupstats ogsb 
                      WHERE ogsb.stat_type = '25 PCT') twentyfive 
          ON ogs.group_id = twentyfive.group_id 
          AND ogs.protein_subset = twentyfive.protein_subset
          INNER JOIN (SELECT ogsc.group_id, ogsc.protein_subset, ogsc.evalue AS median 
                      FROM apidb.orthologgroupstats ogsc 
                      WHERE ogsc.stat_type = 'median') median 
          ON ogs.group_id = median.group_id 
          AND ogs.protein_subset = median.protein_subset
          INNER JOIN (SELECT ogsd.group_id, ogsd.protein_subset, ogsd.evalue AS seventyfive 
                      FROM apidb.orthologgroupstats ogsd 
                      WHERE ogsd.stat_type = '75 PCT') seventyfive 
          ON ogs.group_id = seventyfive.group_id 
          AND ogs.protein_subset = seventyfive.protein_subset
          INNER JOIN (SELECT ogse.group_id, ogse.protein_subset, ogse.evalue AS max 
                      FROM apidb.orthologgroupstats ogse 
                      WHERE ogse.stat_type = 'max') max 
          ON ogs.group_id = max.group_id 
          AND ogs.protein_subset = max.protein_subset
      	  </sql>
	</sqlQuery>

        <sqlQuery name="GroupName">
          <column name="group_name"/>
          <column name="name_string"/>

          <sql>
            <![CDATA[
              select group_id as group_name, group_id as name_string
              from apidb.OrthologGroup
            ]]>
          </sql>
        </sqlQuery>


        <sqlQuery name="KeywordFrequency">
          <column name="group_name" />
          <column name="keyword" />
          <column name="frequency" />
          <sql>
            <![CDATA[
              select og.group_id as group_name, k.keyword, k.frequency
              from apidb.OrthologGroup og, apidb.OrthomclGroupKeyword k
              WHERE og.group_id = k.ortholog_group_id
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="DomainFrequency">
          <column name="group_name" />
          <column name="keyword" />
          <column name="frequency" />
          <sql>
            <![CDATA[
              select og.group_id as group_name, d.description AS keyword, d.frequency
              from apidb.OrthologGroup og, apidb.OrthomclGroupDomain d
              WHERE og.ortholog_group_id = d.ortholog_group_id
            ]]>
          </sql>
        </sqlQuery>


        <sqlQuery name="PhyleticDistributionCounts">
              <column name="group_name" />
	      <column name="alveolata_actual"  />
	      <column name="alveolata_total"  />
	      <column name="alveolata_percent"  />
	      <column name="archaea_actual"  />
	      <column name="archaea_total"  />
	      <column name="archaea_percent"  />
	      <column name="amoeba_actual"  />
	      <column name="amoeba_total"  />
	      <column name="amoeba_percent"  />
	      <column name="bacteria_actual"  />
	      <column name="bacteria_total"  />
	      <column name="bacteria_percent"  />
	      <column name="fungi_actual"  />
	      <column name="fungi_total"  />
	      <column name="fungi_percent"  />
	      <column name="euglenozoa_actual"  />
	      <column name="euglenozoa_total"  />
	      <column name="euglenozoa_percent"  />
	      <column name="metazoa_actual"  />
	      <column name="metazoa_total"  />
	      <column name="metazoa_percent"  />
	      <column name="viridiplantae_actual"  />
	      <column name="viridiplantae_total"  />
	      <column name="viridiplantae_percent"  />
	      <column name="other_eukaryotes_actual"  />
	      <column name="other_eukaryotes_total"  />
	      <column name="other_eukaryotes_percent"  />
          <sql>
            <![CDATA[
     SELECT group_name,
       alveolata_actual,alveolata_total,alveolata_percent,archaea_actual,archaea_total,archaea_percent,
       amoeba_actual,amoeba_total,amoeba_percent,bacteria_actual,bacteria_total,bacteria_percent,
       fungi_actual,fungi_total,fungi_percent,euglenozoa_actual,euglenozoa_total,euglenozoa_percent,
       metazoa_actual,metazoa_total,metazoa_percent,viridiplantae_actual,viridiplantae_total,viridiplantae_percent,
       other_eukaryotes_actual,other_eukaryotes_total,other_eukaryotes_percent
     FROM apidbtuning.PhyleticPattern
            ]]>
          </sql>
        </sqlQuery>

    </querySet>
</wdkModel>
